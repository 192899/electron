notify-slack-failure: &notify-slack-failure
  run:
    name: Send a slack notification on failure
    command: |
      if [ "$NIGHTLY_BUILD" == "true" ]; then
        export MESSAGE="Build failed for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build."
        curl -g -H "Content-Type: application/json" -X POST \
        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"#FC5C3C\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
      fi
    when: on_fail
notify-slack-success: &notify-slack-success
  run:
    name: Send a slack notification on success
    command: |
      if [ "$NIGHTLY_BUILD" == "true" ]; then
        export MESSAGE="Build succeeded for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build."
        curl -g -H "Content-Type: application/json" -X POST \
        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"good\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
      fi
    when: on_success

gn-build-steps: &gn-build-steps
  steps:
    - run:
        name: Setup depot tools
        command: |
          git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV
    - checkout:
        path: src/electron
    - restore_cache:
        paths:
          - ~/.gclient-cache
        keys:
          - v1-gclient-cache-{{ arch }}-{{ checksum "src/electron/DEPS" }}
          - v1-gclient-cache-{{ arch }}-
    - run:
        name: Gclient sync
        command: |
          gclient config \
            --name "src/electron" \
            --unmanaged \
            --cache-dir "$HOME/.gclient-cache" \
            "$CIRCLE_REPOSITORY_URL"

          gclient sync --with_branch_heads --with_tags
    - save_cache:
        paths:
          - ~/.gclient-cache
        key: v1-gclient-cache-{{ arch }}-{{ checksum "src/electron/DEPS" }}
    - run:
        name: GN gen
        command: |
          cd src
          SCCACHE_PATH="$PWD/libchromiumcontent/tools/sccache/aad2120/linux/sccache"
          echo 'export SCCACHE_WRAPPER="'"$SCCACHE_PATH"'"' >> $BASH_ENV
          echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/buildtools"' >> $BASH_ENV
          source $BASH_ENV
          gn gen out/Default --args='import("'$GN_CONFIG'") cc_wrapper="'"$SCCACHE_PATH"'"'" $GN_EXTRA_ARGS"
    - run:
        name: Ninja build
        command: |
          cd src
          ninja -C out/Default electron:electron_app
    - run:
        name: Check sccache stats after build
        command: $SCCACHE_WRAPPER -s
    - run:
        name: Setup for headless testing
        command: |
          sh -e /etc/init.d/xvfb start
    - run:
        name: Test
        environment:
          MOCHA_REPORTER: mocha-junit-reporter
          MOCHA_FILE: junit/test-results.xml
          ELECTRON_DISABLE_SECURITY_WARNINGS: 1
        command: |
          cd src
          ninja -C out/Default third_party/electron_node:headers
          export npm_config_nodedir="$PWD/out/Default/gen/node_headers"
          (cd electron/spec && npm install)
          python electron/script/lib/dbus_mock.py ./out/Default/electron electron/spec --ci --enable-logging
    - store_test_results:
        path: src/junit
    - store_artifacts:
        path: src/junit

version: 2
jobs:
  electron-linux-x64-debug:
    environment:
      DISPLAY: ':99.0'
      GN_CONFIG: //electron/build/args/debug.gn
    docker:
      - image: electronbuilds/electron:0.0.8
    resource_class: 2xlarge
    <<: *gn-build-steps

  electron-linux-x64-release:
    environment:
      DISPLAY: ':99.0'
      GN_CONFIG: //electron/build/args/release.gn
    docker:
      - image: electronbuilds/electron:0.0.8
    resource_class: 2xlarge
    <<: *gn-build-steps

  electron-linux-ia32-debug:
    environment:
      DISPLAY: ':99.0'
      GN_CONFIG: //electron/build/args/debug.gn
      GN_EXTRA_ARGS: 'target_cpu = "x86"'
      NPM_CONFIG_ARCH: ia32
    docker:
      - image: electronbuilds/electron:0.0.8
    resource_class: 2xlarge
    <<: *gn-build-steps

  electron-linux-ia32-release:
    environment:
      DISPLAY: ':99.0'
      GN_CONFIG: //electron/build/args/release.gn
      GN_EXTRA_ARGS: 'target_cpu = "x86"'
      NPM_CONFIG_ARCH: ia32
    docker:
      - image: electronbuilds/electron:0.0.8
    resource_class: 2xlarge
    <<: *gn-build-steps

workflows:
  version: 2
  build-linux:
    jobs:
      - electron-linux-x64-debug
      - electron-linux-x64-release
      - electron-linux-ia32-debug
      - electron-linux-ia32-release
